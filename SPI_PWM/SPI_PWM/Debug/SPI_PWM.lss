
SPI_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000180  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000218  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000970  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000460  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014e  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ad  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000011e  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__vector_16>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__vector_17>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e8       	ldi	r30, 0x80	; 128
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a4 e0       	ldi	r26, 0x04	; 4
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 30       	cpi	r26, 0x0D	; 13
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	89 c0       	rjmp	.+274    	; 0x17c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	//initiating PWM-Timer-Outputs and SPI PINS
	DDRB |=
  6c:	24 9a       	sbi	0x04, 4	; 4
	(1<<PB4) ;	// MISO
	
	DDRB &=
  6e:	84 b1       	in	r24, 0x04	; 4
  70:	83 7d       	andi	r24, 0xD3	; 211
  72:	84 b9       	out	0x04, r24	; 4
	~(1<<PB5) &	// SCK
	~(1<<PB3) &	// MOSI
	~(1<<PB2);	// *SS
	
	
	DDRD |= PORTD_MASK;
  74:	8a b1       	in	r24, 0x0a	; 10
  76:	80 66       	ori	r24, 0x60	; 96
  78:	8a b9       	out	0x0a, r24	; 10
	
	//initiating SPI-Bus
	
	SPCR |= 
  7a:	8c b5       	in	r24, 0x2c	; 44
  7c:	80 6c       	ori	r24, 0xC0	; 192
  7e:	8c bd       	out	0x2c, r24	; 44
	//initiating Timers
	
	
	
	//enable all interrupts
	sei();
  80:	78 94       	sei
  82:	ff cf       	rjmp	.-2      	; 0x82 <main+0x16>

00000084 <__vector_17>:
        //TODO:: Please write your application code 
    }
}

ISR(SPI_STC_vect)
{
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	8f 93       	push	r24
		//fetch = SPDR;
		//if(fetch == 0xAA)
		//word_check = 0;
	//}
	//
	switch (word_check)
  90:	80 91 00 01 	lds	r24, 0x0100
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	51 f0       	breq	.+20     	; 0xac <__vector_17+0x28>
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	18 f0       	brcs	.+6      	; 0xa2 <__vector_17+0x1e>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	81 f4       	brne	.+32     	; 0xc0 <__vector_17+0x3c>
  a0:	0a c0       	rjmp	.+20     	; 0xb6 <__vector_17+0x32>
	{
	case 0:
		receive.val.spare_input[0] = SPDR;
  a2:	8e b5       	in	r24, 0x2e	; 46
		word_check++;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 00 01 	sts	0x0100, r24
		break;
  aa:	0f c0       	rjmp	.+30     	; 0xca <__vector_17+0x46>
	case 1:
		receive.val.spare_input[1] = SPDR;
  ac:	8e b5       	in	r24, 0x2e	; 46
		word_check++;
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	80 93 00 01 	sts	0x0100, r24
		break;
  b4:	0a c0       	rjmp	.+20     	; 0xca <__vector_17+0x46>
	case 2:
		receive.channel = SPDR;
  b6:	8e b5       	in	r24, 0x2e	; 46
		word_check++;
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	80 93 00 01 	sts	0x0100, r24
		break;
  be:	05 c0       	rjmp	.+10     	; 0xca <__vector_17+0x46>
	default:
		fetch = SPDR;
  c0:	8e b5       	in	r24, 0x2e	; 46
		if(fetch == 0xAA)
  c2:	8a 3a       	cpi	r24, 0xAA	; 170
  c4:	11 f4       	brne	.+4      	; 0xca <__vector_17+0x46>
		word_check = 0;
  c6:	10 92 00 01 	sts	0x0100, r1
	}
	
}
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	static uint8_t pinlevelD = 0x00;
	static uint16_t softcounter = 625;
	
	PORTD = pinlevelD;            // update outputs
  e8:	80 91 04 01 	lds	r24, 0x0104
  ec:	8b b9       	out	0x0b, r24	; 11
	
	if(--softcounter == 0)
  ee:	80 91 01 01 	lds	r24, 0x0101
  f2:	90 91 02 01 	lds	r25, 0x0102
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	90 93 02 01 	sts	0x0102, r25
  fc:	80 93 01 01 	sts	0x0101, r24
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	b9 f4       	brne	.+46     	; 0x132 <__vector_16+0x5c>
	{
		compare[0] = compbuff[0];
 104:	80 91 05 01 	lds	r24, 0x0105
 108:	90 91 06 01 	lds	r25, 0x0106
		compare[0] = compbuff[1];
 10c:	80 91 07 01 	lds	r24, 0x0107
 110:	90 91 08 01 	lds	r25, 0x0108
 114:	90 93 0a 01 	sts	0x010A, r25
 118:	80 93 09 01 	sts	0x0109, r24
	
		pinlevelD &= ~PORTD_MASK;     // set all port pins high	
 11c:	80 91 04 01 	lds	r24, 0x0104
 120:	8f 79       	andi	r24, 0x9F	; 159
 122:	80 93 04 01 	sts	0x0104, r24
		
		softcounter = 625;
 126:	81 e7       	ldi	r24, 0x71	; 113
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	90 93 02 01 	sts	0x0102, r25
 12e:	80 93 01 01 	sts	0x0101, r24
	}
	
	// clear port pin on compare match (executed on next interrupt)
	if(compare[0] == softcounter) CH0_SET;
 132:	80 91 01 01 	lds	r24, 0x0101
 136:	90 91 02 01 	lds	r25, 0x0102
 13a:	20 91 09 01 	lds	r18, 0x0109
 13e:	30 91 0a 01 	lds	r19, 0x010A
 142:	28 17       	cp	r18, r24
 144:	39 07       	cpc	r19, r25
 146:	29 f4       	brne	.+10     	; 0x152 <__vector_16+0x7c>
 148:	20 91 04 01 	lds	r18, 0x0104
 14c:	20 62       	ori	r18, 0x20	; 32
 14e:	20 93 04 01 	sts	0x0104, r18
	if(compare[1] == softcounter) CH1_SET;
 152:	20 91 0b 01 	lds	r18, 0x010B
 156:	30 91 0c 01 	lds	r19, 0x010C
 15a:	82 17       	cp	r24, r18
 15c:	93 07       	cpc	r25, r19
 15e:	29 f4       	brne	.+10     	; 0x16a <__vector_16+0x94>
 160:	80 91 04 01 	lds	r24, 0x0104
 164:	80 64       	ori	r24, 0x40	; 64
 166:	80 93 04 01 	sts	0x0104, r24
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
